package com.example.accessingdata;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (
			  @RequestParam String login
			, @RequestParam String pass
			, @RequestParam String stat
			, @RequestParam String firstName
			, @RequestParam String lastName
		) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setLogin(login);
		n.setPass(n.getHashedPass(pass));
		n.setStat(stat);
		n.setFirstName(firstName);
		n.setLastName(lastName);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@PostMapping(path="/check")
	public @ResponseBody Boolean Check(
			@RequestParam String login,
			@RequestParam String pass
	){
		List<User> users = userRepository.findByLogin(login);

			User user = users.stream()
				.filter(usr -> usr.getHashedPass(pass).equals(usr.getPass()))
				.findFirst()
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found with login=" + login));

		return true;

		// return Boolean.toString(userRepository.existsByLogin(login) && userRepository.existsByPass(pass));
	}
}
